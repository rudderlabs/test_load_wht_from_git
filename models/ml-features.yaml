resources:
  domain_profile:
    resourceType: FeatureTableModel
    resourceSpec:
      validityTime: 24h # 1 day
      idStitching:
        id_types:
          types:
            salesforce_id:
            rudder_anon_id:
            email:
            domain:
        inputs:
          # For every input model, we need to know the column expression which gives identity of each row in the column.
          - name: salesforceTasks
            ref: { table: salesforce.task, timestampCol: activitydate }
            ids:
              - sql: "whoid"
                type: salesforce_id
          - name: salesforceContact
            ref: { table: salesforce.contact, timestampCol: createddate }
            ids:
              - sql: "id"
                type: salesforce_id
              - sql: "case when lower(email) like any ('%gmail%', '%yahoo%') then lower(email)  else split_part(lower(email),'@',2) end"
                type: email
          - name: websitePageVisits
            ref: { table: autotrack.pages, timestampCol: timestamp }
            ids:
              - sql: "anonymous_id"
                type: rudder_anon_id
              - sql: "case when lower(coalesce(context_traits_email, user_id)) like any ('%gmail%', '%yahoo%') then lower(coalesce(context_traits_email, user_id))  \
                     else split_part(lower(coalesce(context_traits_email, user_id)),'@',2) end"
                type: email
          - name: webhookSource
            ref: { table: eric_db.webhook_source_event, timestampCol: timestamp }
            ids:
              - sql: "anonymous_id"
                type: rudder_anon_id
          - name: websiteSource
            ref: { table: autotrack.form_submit, timestampCol: timestamp }
            ids: 
              - sql: "anonymous_id"
                type: rudder_anon_id
          - name: blacklistDomains
            ref: { table: eric_db.email_exclusion_list_rows, timestampCol: timestamp }
            ids: 
              - sql: "case when lower(user_id) like any ('%gmail%', '%yahoo%') then lower(user_id)  else split_part(lower(user_id),'@',2) end"
                type: email
          - name: domainSummary
            ref: { table: analytics.agg_domain_summary, timestampCol: first_event_sent_date }
            ids:
              - sql: domain
                type: domain
          - name: webappIdentifies
            ref: { table: webapp.identifies, timestampCol: timestamp }
            ids:
              - sql: "anonymous_id"
                type: rudder_anon_id
              - sql: "case when lower(coalesce(context_traits_email, user_id)) like any ('%gmail%', '%yahoo%') \
                     then lower(coalesce(context_traits_email, user_id))  \
                     else split_part(lower(coalesce(context_traits_email, user_id)),'@',2) end"
                type: email
          - name: salesForceLeadsTable
            ref: { table: salesforce.lead, timestampCol: createddate }
            ids:
              - sql: "id"
                type: salesforce_id
              - sql: "case when lower(user_id) like any ('%gmail%', '%yahoo%') then lower(user_id)  else split_part(lower(user_id),'@',2) end"
                type: email
              - sql: "case when lower(email) like any ('%gmail%', '%yahoo%') then lower(email)  else split_part(lower(email),'@',2) end"
                type: email
          - name: autotrackIdentifies
            ref: { table: autotrack.identifies, timestampCol: timestamp }
            ids:
              - sql: "anonymous_id"
                type: rudder_anon_id
              - sql: "case when lower(coalesce(context_traits_email, user_id)) like any ('%gmail%', '%yahoo%') then lower(coalesce(context_traits_email, user_id))  \
                   else split_part(lower(coalesce(context_traits_email, user_id)),'@',2) end"
                type: email
      features:
        - feature:
            name: is_mql
            value: max(case when salesForceLeadsTable.mql__c == 'True' then 1 else 0 end)
            description: Whether a domain is mql or not
        - tablevar:
            name: blacklistFlag
            table: blacklistDomains
            filter: (context_sources_job_run_id = (select top 1 context_sources_job_run_id from blacklistDomains order by timestamp desc))
            value: max(case when exclude_reason is not null then 1 else 0 end)
        - feature:
            name: ignore_domain
            value: max(case when blacklistFlag = 1 or domainSummary.account_type like '%free%' then 1 else 0 end)
            description: Whether a domain should be ignored for the analysis
        - macro:
            name: call_conversion
            value: type = 'Call' or tasksubtype='Call' or type like '%demo%') and \
                   (rlike(lower(subject), '.*\\bcall\\b.*') or rlike(lower(subject), '.*\\bdemo\\b.*'
        - tablevar:
            name: salesCallEventTime
            table: salesforceTasks
            value: min(activitydate)
            filter: macro(call_conversion)
        - feature:
            name: sales_conversion_timestamp
            value: salesCallEventTime
        - tablevar:
            name: salesEvents
            table: salesforceTasks
            value: json_agg(activitydate, case when (type='Email' or tasksubtype = 'Email') then case when lower(subject) like '%[in]%' then 'sf_inbound_email' \
                   else 'sf_outbound_email' end when macro(call_conversion) then 'sf_call' else null end as event)
            description: Salesforce touches are converted to one of following events - sf_inbound_email, sf_outbound_email, sf_call, null
        - tablevar:
            name: page_events_var
            table: websitePageVisits
            filter: timestamp < sales_conversion_timestamp and timestamp > var('start_date')
            value: json_agg(timestamp, case when split_part(trim(context_page_path, '/'), '/', 1) in var('valid_page_paths') then split_part(trim(context_page_path, '/'), '/', 1) \
                   else var('default_page_path') end as event)
        - feature:
            name: page_events
            value: page_events_var
        - tablevar:
            name: webhookFormSubmit
            table: webhookSource
            filter: variable_1 is null and timestamp < sales_conversion_timestampand timestamp > var('start_date')
            value:  min(timestamp)
        - tablevar:
            name: websiteFormSubmit
            table: websiteSource
            filter: timestamp < sales_conversion_timestamp and timestamp > var('start_date')
            value:  min(timestamp)
        - feature:
            name: formSubmit
            value: min(webhookFormSubmit, websiteFormSubmit)
